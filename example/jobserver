#!/usr/bin/env perl

use autodie;
use strict;
use warnings;
use v5.10;
use Mojo::Redis;
use Mojo::JSON;
use Mojolicious::Lite;

my $jobnumber = 0;
my $redis = Mojo::Redis->new;
my $json = Mojo::JSON->new;

sub get_job_hash
{
  my($c, $cb) = @_;
  $redis->hgetall(jobs => sub {
    my($redis, $jobs) = @_;
    
    my %jobs;
    
    while(my($key,$val) = each %$jobs)
    {
      my($server, $id) = split /\./, $key;
      $jobs{$server}->{$id} = $json->decode($val);
    }
    
    $c->stash(jobs => \%jobs);
    $cb->();
  });
  $c->render_later;
}

get '/' => sub {
  my $self = shift;
  get_job_hash($self, sub {
    $self->render('index');
  });
} => 'index';

get '/server/:server' => sub {
  my $self = shift;
  get_job_hash($self, sub {
    my $server = $self->param('server');
    if(defined $self->stash->{jobs}->{$server})
    {
      $self->stash(server => $server);
      $self->render('server');
    }
    else
    {
      $self->render_not_found;
    }
  });
} => 'server';

get '/job/:server/:id' => sub {
  my($self) = shift;
  my $key = join '.', $self->param('server'), $self->param('id');
  my $list = join '.', qw( job event ), $key;
  $redis->hget('jobs', $key, sub {
    my($redis, $command) = @_;
    my @command = @{ $json->decode($command) };
    $self->stash(command => \@command);
    $redis->lrange($list, 0, -1, sub {
      my $redis = shift;
      my @events = map { $json->decode($_) } @{ shift() };
      use YAML ();
      print YAML::Dump(\@events);
      $self->stash(events => \@events);
      $self->render('job');
    });
  });
  $self->render_later;
} => 'job';

websocket '/watch/:server/:job' => sub {
  my($self) = @_;
  my $server = $self->param('server');
  my $job    = $self->param('job');
};

websocket '/run' => sub {
  my($self) = @_;

  my $id1 = join '.', $$, $jobnumber;
  my $id2 = join '.', qw( job event ), $$, $jobnumber++;
  
  $self->on(message => sub {
    my($self, $message) = @_;

    my $payload = $json->decode($message);
    unless(defined $payload)
    {
      warn "error decoding: $message";
      return;
    }
    
    if(ref($payload) eq 'ARRAY')
    {
      $redis->hset('jobs', $id1, $message);
    }
    else
    {
      $redis->rpush($id2, $message);
    }

  });
  
  $self->on(finish => sub {
    $redis->rpush($id2, $json->encode({ type => 'closed' }));
    undef $id1;
    undef $id2;
  });
};

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'job server';

<ul>
% foreach my $server (sort keys %$jobs) {
  <li><a href="<%= url_for 'server', server => $server %>">server <%= $server %></a>
    <ul>
%     foreach my $id (sort keys %{ $jobs->{$server} }) {
        <li>
          <a href="<%= url_for 'job', server => $server, id => $id %>">
            <%= join ' ', @{ $jobs->{$server}->{$id} } %> (<%= $id %>)
          </a>
        </li>
%     }
    </ul>
  </li>

% }

@@ server.html.ep
% layout 'default';
% title 'server ' . $server;

<ul>
% foreach my $id (sort keys %{ $jobs->{$server} }) {
  <li>
    <a href="<%= url_for 'job', server => $server, id => $id %>">
      <%= join ' ', @{ $jobs->{$server}->{$id} } %> (<%= $id %>)
    </a>
  </li>
% }
</ul>

@@ job.html.ep
% layout 'default';
% title 'job';

<pre>
<%= join ' ', '%', @$command %>
% foreach my $event (@{ $events }) {
%   if($event->{type} eq 'out') {
<%= $event->{data} %>
%   } elsif($event->{type} eq 'err') {
<%= $event->{data} %>
%   } elsif($event->{type} eq 'error') {
ERROR: <%= $event->{data} %>
%   } elsif($event->{type} eq 'exit') {
EXIT: <%= $event->{exit} %> <% if($event->{signal}) { %>SIGNAL: <%= $event->{signal} %><% } %>
%   } elsif($event->{type} eq 'closed') {
CONNECTION CLOSED
%   }
% }
</pre>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
